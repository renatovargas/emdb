---
title: "GEARS database preparation"
author:
  - name: "Renato Vargas"
    id: rv
    # email: renovargas@gmail.com
    affiliation: 
      - name: "Consultant for FAO"
bibliography: references.bib
---

# Introduction

In this session, we prepare a harmonized emissions dataset with inputs from FAOSTAT [@fao2024] and EDGAR [@crippa2023]. The objective is to have a single data lake from which we can extract data and make it compatible with any structure of economic activities. 

## Preliminaries

```{r}
#| warning: false
#| message: false
#| label: libraries

# Clean workspace
rm(list = ls())

# Load libraries
library(tidyverse)
library(haven)
library(readxl)
library(openxlsx)
library(gt)
# library(sf)
# library(tmap)
# library(raster)

# Custom functions
source("gears_db/scripts/custom_functions.R")
```

## Datasets

Note that some datasets have been converted to R rds files in a previous step for space considerations.

### EDGAR

```{r}
#| warning: false
#| message: false
#| label: datasets-edgar

# EDGAR
edgar <- read_xlsx(
  "gears_db/data/edgar/EDGAR_AR5_GHG_1970_2023.xlsx",
  skip = 9,
  sheet = "IPCC 2006")

edgar_co2 <- read_xlsx(
  "gears_db/data/edgar/IEA_EDGAR_CO2_1970_2023.xlsx",
  skip = 9,
  sheet = "IPCC 2006")

edgar_co2bio  <- read_xlsx(
  "gears_db/data/edgar/EDGAR_CO2bio_1970_2023.xlsx",
  skip = 9,
  sheet = "IPCC 2006")

edgar_ch4 <- read_xlsx(
  "gears_db/data/edgar/EDGAR_CH4_1970_2023.xlsx",
  skip = 9,
  sheet = "IPCC 2006")

edgar_n2o <- read_xlsx(
  "gears_db/data/edgar/EDGAR_N2O_1970_2023.xlsx",
  skip = 9,
  sheet = "IPCC 2006")

edgar_f_gases <- read_xlsx(
  "gears_db/data/edgar/EDGAR_AR5g_F-gases_1990_2023.xlsx",
  skip = 9,
  sheet = "IPCC 2006")
```

### FAOSTAT

```{r}
#| warning: false
#| message: false
#| label: datasets-faostat

# FAOSTAT
faostat_total_emissions <- 
  readRDS(
    "gears_db/data/faostat/total_emissions.rds")
faostat_crops <- 
  readRDS(
    "gears_db/data/faostat/crops.rds")
faostat_drained_organic_soils <- 
  readRDS(
    "gears_db/data/faostat/drained_organic_soils.rds")
faostat_flags <- 
  readRDS(
    "gears_db/data/faostat/flags.rds")
faostat_livestock <- 
  readRDS("gears_db/data/faostat/livestock.rds")
faostat_production <- 
  readRDS(
    "gears_db/data/faostat/production.rds")
faostat_area_codes <- 
  readRDS(
    "gears_db/data/faostat/area_codes.rds")
```

### Equivalence tables

```{r}
fao_countries <- read_xlsx(
  "gears_db/data/classifications/equivalence.xlsx",
  sheet = "FAOSTAT COUNTRIES")
fao_ipcc <- read_xlsx(
  "gears_db/data/classifications/equivalence.xlsx",
  sheet = "FAOSTAT IPCC")
isic <- read_xlsx(
  "gears_db/data/classifications/equivalence.xlsx",
  sheet = "GWP ISIC")
```



# Initial processing

## EDGAR databases

The first thing that we do with EDGAR is see which domains from IPCC it covers.

```{r}
#| warning: false
#| message: false
#| label: edgar-ipcc-domains

edgar_ipcc_names <- 
  data.frame(
    code      = unique(
      edgar$ipcc_code_2006_for_standard_report),
    ipcc_name = unique(
      edgar$ipcc_code_2006_for_standard_report_name)) |> 
  arrange(code)

edgar_ipcc_names |> 
  gt()
```

The first thing that we see is that LULUCF is not included. We take note of this as we remove the domains that are covered in more detail in FAOSTAT (section 3). Originally, we estimated our own emissions for the energy part (section 1) from converting Energy Balances to the SEEA energy accounts format. However, this requires a National Accounts distribute uses and applying TIER 1 coefficients, so in this first version, we will take it as is from EDGAR. 

Our concern is that EDGAR takes s use outside energy transformer industries from energy balance (i.e. other industrial, residential, transportation) at face value and we believe that this distribution can be improved if National Accounts is used to distribute intermediate and final consumption of energy outside .

We could use total CO2 equivalent emissions aggregated from our `edgar` dataset, but full disaggregation by gas has been requested, so we perform our cleaning of the dataset for all of these and apply Tier 1 Global Warming Potential (GWP AR5) coefficients to individual datasets.

But first we use custom function `transform_edgar_datasets` to extract the relevant IPCC items and normalize the years structure.

### Individual datasets

```{r}
#| warning: false
#| message: false
#| label: edgar-domain-filtering

# Usage
datasets <- list(
  edgar_co2,
  edgar_ch4,
  edgar_n2o,
  edgar_f_gases
)
dataset_names <- c("co2", "ch4", "n2o", "edgar_f_gases")

transform_edgar_datasets(datasets, dataset_names)
rm(datasets)
```
### Dataset binding and GWP calculation

With the datasets transformed, we bind them together and transform to GWP.

```{r}
#| warning: false
#| message: false
#| label: edgar-datasets-binding

# Usage
gwp_edgar_total <- rbind(
  transformed_co2,
  transformed_ch4,
  transformed_n2o,
  transformed_edgar_f_gases) |> 
  mutate(
    Value = case_when(
      Substance == "CH4" ~ Value * 28 , # GWP CH4 AR5 100-year horizon
      Substance == "N2O" ~ Value * 265, # GWP N2O AR5 100-year horizon
      .default = Value
    ),
    Substance = case_when(
      Substance == "CO2" ~ "Emissions (CO2)",
      Substance == "CH4" ~ "Emissions (CO2eq) from CH4 (AR5)",
      Substance == "N2O" ~ "Emissions (CO2eq) from N2O (AR5)",
      .default = Substance
    ),
    `Element Code` = case_when(
      Substance == "Emissions (CO2)" ~ 7273,
      Substance == "Emissions (CO2eq) from CH4 (AR5)" ~ 724413,
      Substance == "Emissions (CO2eq) from N2O (AR5)" ~ 724313,
      .default = NA
    ),
    Unit = "kt",
    `Driver Code` =
      ipcc_code_2006_for_standard_report,
    Driver = 
      ipcc_code_2006_for_standard_report_name,
    `Sector Code` = 9999,
    Sector = "EDGAR TBD"
  ) |> 
  mutate(across(where(is.character), as.factor)) |> 
  rename(
    Element = Substance,
    ISO3 = Country_code_A3,
    `IPCC Code` = ipcc_code_2006_for_standard_report,
    IPCC = ipcc_code_2006_for_standard_report_name) |> 
  left_join(
    fao_countries,
    join_by(ISO3)
  ) |> 
  select(
    `Area Code`,
    Area,
    ISO3,
    `Driver Code`,
    Driver,
    `Sector Code`,
    Sector,
    `Element Code`,
    Element,
    `IPCC Code`, 
    IPCC,
    Year,
    Unit,
    Value )

# Remove all EDGAR inputs
rm(list = 
  ls()[startsWith(ls(), "transformed_") |
         startsWith(ls(), "edgar")])

# And save to RDS
saveRDS(gwp_edgar_total, "gears_db/data/outputs/gwp_edgar_total.rds")
```

##FAOSTAT databases

### Total emissions

Now we turn our attention to FAOSTAT. First we clean the totals dataset `faostat_total_emissions`.

```{r}
# For reference
as.data.frame(rbind(
  cbind("elements", as.matrix(
    unique(faostat_total_emissions$`Element Code`)
  ), as.matrix(
    unique(faostat_total_emissions$Element)
  )),
  cbind("items", as.matrix(
    unique(faostat_total_emissions$`Item Code`)
  ), as.matrix(unique(
    faostat_total_emissions$`Item`
  )))
)) |>
  gt()
```


```{r}
#| warning: false
#| message: false
#| label: faostat-total-emissions

# Filter elements of interest
transformed_faostat_total <- faostat_total_emissions |>
  filter(
    `Item Code` %in% c(
      5061, 67292, 
      67291, 6751, 6750, 
      6795,  6993, 6992
    ),
    # `Item Code` %in% c(
    #   5064,  5060, 5066, 
    #   5058,  5059, 5063, 
    #   5062,  5061, 67292, 
    #   67291, 6751, 6750, 
    #   6795,  6993, 6992
    # ), 
    `Element Code` %in% c(
      724313, 724413,
      7273, 717815)
    ) |> 
  rename(
    `Driver Code` = `Item Code`,
    Driver = Item
  ) |> 
  mutate(
    `Sector Code` = 9999,
    Sector = "Undetermined"
  ) |> 
  # Finally select in order to 
  # bind to livestock and crops
  select(
    `Area Code`,
    Area,
    `Driver Code`,
    Driver,
    `Sector Code`,
    Sector,
    `Element Code`,
    Element,
    Year,
    Unit,
    Value
  )
```

Then the resulting items:

```{r}
# For reference
as.data.frame(rbind(
  cbind("elements", as.matrix(
    unique(transformed_faostat_total$`Element Code`)
  ), as.matrix(
    unique(transformed_faostat_total$Element)
  )),
  cbind("Drivers", as.matrix(
    unique(transformed_faostat_total$`Driver Code`)
  ), as.matrix(unique(
    transformed_faostat_total$`Driver`
  )))
)) |>
  gt()
```

Then we move to the detailed datasets.

### Crops

```{r}
# For reference
as.data.frame(rbind(
  cbind("elements", as.matrix(
    unique(faostat_crops$`Element Code`)
  ), as.matrix(
    unique(faostat_crops$Element)
  )),
  cbind("items", as.matrix(
    unique(faostat_crops$`Item Code`)
  ), as.matrix(unique(
    faostat_crops$`Item`
  )))
)) |>
  gt()
```

```{r}
#| warning: false
#| message: false
#| label: faostat-crops

# Filter elements of interest
transformed_faostat_crops <- faostat_crops |> 
  filter(
    ! `Element Code` %in% c(
      5312, 5162, 516201, 516202,
      7245, 72303, 72430, 72440, 
      72342, 72343, 72362,
      723631, 723632, 72392
    ),
    `Item Code` != 1712
    # ! `Element Code` %in% c(
    #   5162, 516201, 516202,
    #   7245, 72430, 72440,
    #   72342, 72362,
    #   723631, 723632, 72392
    # )
    ) |> 
  # Global Warming Potential
  mutate(
    Value = case_when(
      `Element Code` %in% c(
        72255, 72257
      ) ~ Value * 28, # GWP CH4 AR5 100-year horizon
      `Element Code` %in% c(
        72302,72307
      ) ~ Value * 265 # GWP N2O AR5 100-year horizon
    )
  ) |> 
  mutate(
    temp_code = case_when(
      `Element Code` %in% c(
        72255, 72257
      ) ~ 724413,
      `Element Code` %in% c(
        72307, 72302
      ) ~ 724313,
      .default = NA
    ),
    temp = case_when(
      `Element Code` %in% c(
        72255, 72257
      ) ~ "Emissions (CO2eq) from CH4 (AR5)",
      `Element Code` %in% c(
        72307, 72302
      ) ~ "Emissions (CO2eq) from N2O (AR5)",
      .default = NA
    )
  ) |> 
  rename(
    `Sector Code` = `Item Code`,
    `Sector` = Item,
    `Driver Code` = `Element Code`,
    Driver = Element,
    `Element Code`= temp_code,
    Element = temp
  )|> 
  # Finally select in order to 
  # bind to livestock and crops
  select(
    `Area Code`,
    Area,
    `Driver Code`,
    Driver,
    `Sector Code`,
    Sector,
    `Element Code`,
    Element,
    Year,
    Unit,
    Value
  )
```

The resulting items

```{r}
# For reference
as.data.frame(rbind(
  cbind("Sectors", as.matrix(
    unique(transformed_faostat_crops$`Sector Code`)
  ), as.matrix(
    unique(transformed_faostat_crops$Sector)
  )),
  cbind("Drivers", as.matrix(
    unique(transformed_faostat_crops$`Driver Code`)
  ), as.matrix(unique(
    transformed_faostat_crops$`Driver`
  )))
)) |>
  arrange(V1,V2) |> 
  gt()
```
```{r}
transformed_faostat_crops |> 
  filter(
    Year == 2018,
    Area == "Nigeria"
  ) |> 
  group_by(
    Driver,
    Sector,
    Unit
  ) |> 
  summarize(
    Total = sum(Value, na.rm = T)
  ) |> 
  ungroup() |> 
  gt()
```


### Livestock

```{r}
#| warning: false
#| message: false
#| label: faostat-livestock

# Filter elements of interest
transformed_faostat_livestock <- faostat_livestock |> 
  filter(
    ! `Element Code` %in% c(
      72380,  72381, 72386, 
      723601, 723602, 723611, 
      723612, 723801, 723802, 
      723811, 723812, 72340, 
      72341, 72346, 72360, 
      72361, 72366, 72431,
      72441
    ),
    ! `Item Code` %in% c(
      1757, 1759, 1760,
      1054, 2029, 1749,
      1048, 1755
    )) |>
  mutate(
    Value = case_when(
      `Element Code` %in% c(
        72254, 72256
      ) ~ Value * 28, # GWP CH4 AR5 100-year horizon
      `Element Code` %in% c(
        72300, 72301, 72306
      ) ~ Value * 265 # GWP N2O AR5 100-year horizon
    )
  ) |> 
  mutate(
    temp_code = case_when(
      `Element Code` %in% c(
        72254, 72256
      ) ~ 724413,
      `Element Code` %in% c(
        72300, 72301, 72306
      ) ~ 724313,
       `Element Code` == 5111 ~ 5111,
      .default = NA
    ),
    temp = case_when(
      `Element Code` %in% c(
        72254, 72256
      ) ~ "Emissions (CO2eq) from CH4 (AR5)",
      `Element Code` %in% c(
        72300, 72301, 72306
      ) ~ "Emissions (CO2eq) from N2O (AR5)",
      `Element Code` == 5111 ~ "Number of animals",
      .default = NA
    )
  ) |> 
  rename(
    `Driver Code` = `Element Code`,
    Driver = Element,
    `Sector Code` = `Item Code`,
    Sector = Item,
    `Element Code`= temp_code,
    Element = temp
  )|> 
  # Finally select in order to 
  # bind to livestock and crops
  select(
    `Area Code`,
    Area,
    `Driver Code`,
    Driver,
    `Sector Code`,
    Sector,
    `Element Code`,
    Element,
    Year,
    Unit,
    Value
  )
```

The resulting items

```{r}
# For reference
as.data.frame(rbind(
  cbind("Drivers", as.matrix(
    unique(transformed_faostat_livestock$`Driver Code`)
  ), as.matrix(
    unique(transformed_faostat_livestock$Driver)
  )),
  cbind("Sectors", as.matrix(
    unique(transformed_faostat_livestock$`Sector Code`)
  ), as.matrix(unique(
    transformed_faostat_livestock$`Sector`
  )))
)) |>
  arrange(V1,V2) |> 
  gt()
```


### Dataset binding

```{r}
#| warning: false
#| message: false
#| label: faostat-datasets-binding

gwp_faostat_total <- rbind(
  transformed_faostat_total,
  transformed_faostat_crops,
  transformed_faostat_livestock) |>
  left_join(fao_countries[,c(1,3)], join_by(`Area Code`)) |>
  left_join(fao_ipcc, join_by(Driver)) |> 
  filter(! is.na(ISO3)) |> 
  relocate(`IPCC Code`, `IPCC`, .before = Year) |> 
  relocate(ISO3, .before = `Driver Code`)
  

# And save to RDS
saveRDS(gwp_faostat_total, "gears_db/data/outputs/gwp_faostat_total.rds")

objects <- c(
  "faostat_total_emissions", 
  "faostat_crops", 
  "faostat_livestock")

# Remove only variables if they exist
rm(list = objects[objects %in% ls()])
```


# Bind Final Datasets

```{r}
gwp_total_emissions <- rbind(
  gwp_faostat_total,
  gwp_edgar_total
) |> 
  left_join(
    isic[,c(1,3,4)],
    join_by(
      `Driver Code`
    )
  ) |> 
  relocate(`ISIC Code`, `ISIC`, .before = Year)

# And save to RDS
saveRDS(gwp_total_emissions, "gears_db/data/outputs/gwp_total_emissions.rds")
```



```{r}
# # FAO
# fao_countries <- as.data.frame(
#   cbind(as.matrix(
#     unique(gwp_faostat_total$`Area Code`)
#   ), as.matrix(
#     unique(gwp_faostat_total$`Area`)
#   ))) |>
#   arrange(V1,V2)
# 
# write.table(fao_countries, "clipboard", sep = "\t", row.names = F)
```


```{r}
# EDGAR
# edgar_countries <- as.data.frame(
#   cbind(as.matrix(
#     unique(gwp_edgar_total$Name)
#   ), as.matrix(
#     unique(gwp_edgar_total$Country_code_A3)
#   ))) |>
#   arrange(V1,V2)
# 
# write.table(edgar_countries, "clipboard", sep = "\t", row.names = F)

# Drivers

# drivers <- gwp_total_emissions |> 
#   group_by(
#     `Driver Code`,
#     Driver,
#     `Sector Code`,
#     Sector
#   ) |> 
#   summarize(Total = sum(Value, na.rm = T))
# 
# write.table(drivers, "clipboard", sep = "\t", row.names = F)

# test <- gwp_total_emissions |> 
#   filter(Year %in% c(2018:2020))
# write.xlsx(
#   test,
#   file = "gears_db/data/outputs/gwp_total_emissions_test.xlsx")


```

# End

```{r}

```


